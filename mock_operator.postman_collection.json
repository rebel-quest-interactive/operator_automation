{
	"info": {
		"_postman_id": "e0c199f4-bc94-4310-8801-00800d63f81d",
		"name": "mock_operator",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "45485451",
		"_collection_link": "https://edwardsusa.postman.co/workspace/Edward-Susa's-Workspace~c5a94376-642f-4150-8c5e-f857a239de86/collection/45485451-e0c199f4-bc94-4310-8801-00800d63f81d?action=share&source=collection_link&creator=45485451"
	},
	"item": [
		{
			"name": "automation_operator",
			"item": [
				{
					"name": "Auth",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generador de UUID v4\r",
									"function uuidv4() {\r",
									"  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r",
									"    var r = Math.random() * 16 | 0,\r",
									"        v = c === 'x' ? r : (r & 0x3 | 0x8);\r",
									"    return v.toString(16);\r",
									"  });\r",
									"}\r",
									"\r",
									"// Obtener contador actual o iniciar en 1\r",
									"let counter = parseInt(pm.environment.get(\"UNIT_COUNTER\") || \"1\", 10);\r",
									"\r",
									"// Generar UNIT_ID como client001, client002, etc.\r",
									"let unitId = `client${counter.toString().padStart(3, '0')}`;\r",
									"pm.environment.set(\"UNIT_ID\", unitId);\r",
									"\r",
									"// Incrementar el contador para la próxima ejecución\r",
									"pm.environment.set(\"UNIT_COUNTER\", counter + 1);\r",
									"\r",
									"// Generar un UUID nuevo para cada ejecución\r",
									"let uuid = uuidv4();\r",
									"pm.environment.set(\"UUID\", uuid);\r",
									"\r",
									"// Obtener el secreto desde las variables de entorno\r",
									"let salt = pm.environment.get(\"CHECKSUM_SECRET\");\r",
									"\r",
									"// Concatenar baseString y calcular checksum\r",
									"let baseString = [unitId, uuid, salt].join(\";\");\r",
									"let checksum = CryptoJS.MD5(baseString).toString();\r",
									"pm.environment.set(\"CHECKSUM\", checksum);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const json = pm.response.json();\r",
									"\r",
									"if (json && json.extToken) {\r",
									"    pm.environment.set(\"JWT\", json.extToken);\r",
									"    console.log(\"JWT set:\", json.extToken);\r",
									"} else {\r",
									"    console.log(\"No extToken found in response.\");\r",
									"}\r",
									"// Test for the response content type\r",
									"pm.test(\"Response has content type application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"type\": \"UserAuthenticationRequest\",\r\n  \"unitId\": \"{{UNIT_ID}}\",\r\n  \"uuid\": \"{{UUID}}\",\r\n  \"checksum\": \"{{CHECKSUM}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}auth/user-authentication",
							"host": [
								"{{BASE_URL}}auth"
							],
							"path": [
								"user-authentication"
							]
						},
						"description": "This endpoint allows the client to authenticate a user. The request should be sent as an HTTP POST to {{BASE_URL}}auth/user-authentication with a raw request body containing the keys type, unitId, uuid, and checksum. The response will have a status code of 200 and a content type of application/json. The response body will contain the keys type, extToken, credit, and currency."
					},
					"response": []
				},
				{
					"name": "Sell",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generador de UUID v4\r",
									"function uuidv4() {\r",
									"  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r",
									"    const r = Math.random() * 16 | 0;\r",
									"    const v = c === 'x' ? r : (r & 0x3 | 0x8);\r",
									"    return v.toString(16);\r",
									"  });\r",
									"}\r",
									"\r",
									"// Variables base\r",
									"const extToken = pm.environment.get(\"JWT\");\r",
									"const operatorId = \"operator1\";\r",
									"\r",
									"// Generar ticketId aleatorio\r",
									"const randomSuffix = Math.random().toString(36).substring(2, 8).toUpperCase();\r",
									"const ticketId = `tq-${randomSuffix}`;\r",
									"pm.environment.set(\"TICKET_ID\", ticketId);\r",
									"\r",
									"// totalAmount aleatorio entre 100 y 10000\r",
									"const totalAmount = Math.floor(Math.random() * 1001); // entre 0 y 1000\r",
									"pm.environment.set(\"TOTAL_AMOUNT\", totalAmount);\r",
									"\r",
									"// UUIDs y salt\r",
									"const uuid = uuidv4();\r",
									"const refUuid = pm.environment.get(\"SELL_UUID\");\r",
									"const salt = pm.environment.get(\"CHECKSUM_SECRET\");\r",
									"const type = \"SellRequest\";\r",
									"\r",
									"// Cálculo de checksum\r",
									"const baseString = [\r",
									"    type,\r",
									"    extToken,\r",
									"    operatorId,\r",
									"    ticketId,\r",
									"    totalAmount,\r",
									"    uuid,\r",
									"    salt\r",
									"].join(\";\");\r",
									"\r",
									"const checksum = CryptoJS.MD5(baseString).toString();\r",
									"\r",
									"// Guardar UUID y checksum\r",
									"pm.environment.set(\"SELL_UUID\", uuid);\r",
									"pm.environment.set(\"SELL_CHECKSUM\", checksum);\r",
									"\r",
									"// Armar body dinámico\r",
									"const body = {\r",
									"  type: type,\r",
									"  extToken: extToken,\r",
									"  operatorId: operatorId,\r",
									"  ticketId: ticketId,\r",
									"  totalAmount: totalAmount,\r",
									"  uuid: uuid,\r",
									"  refUuid: refUuid,\r",
									"  transactions: [\r",
									"    {\r",
									"      game: {\r",
									"        id: \"ruleta_3_tombolas_20250530_1000\",\r",
									"        type: \"ruleta_3_tombolas\",\r",
									"        details: {\r",
									"          tipo: \"quiniela\",\r",
									"          numero: 27,\r",
									"          tombola: 1,\r",
									"          multiplicador: 60\r",
									"        }\r",
									"      },\r",
									"      transaction: {\r",
									"        amount: 20\r",
									"      }\r",
									"    },\r",
									"    {\r",
									"      game: {\r",
									"        id: \"ruleta_3_tombolas_20250530_1000\",\r",
									"        type: \"ruleta_3_tombolas\",\r",
									"        details: {\r",
									"          tipo: \"pale\",\r",
									"          numeros: [14, 85],\r",
									"          tombolas: [1, 2],\r",
									"          multiplicador: 1000\r",
									"        }\r",
									"      },\r",
									"      transaction: {\r",
									"        amount: 10\r",
									"      }\r",
									"    },\r",
									"    {\r",
									"      game: {\r",
									"        id: \"ruleta_3_tombolas_20250530_1000\",\r",
									"        type: \"ruleta_3_tombolas\",\r",
									"        details: {\r",
									"          tipo: \"tripleta\",\r",
									"          numeros: [3, 11, 56],\r",
									"          tombolas: [1, 2, 3],\r",
									"          multiplicador: 20000\r",
									"        }\r",
									"      },\r",
									"      transaction: {\r",
									"        amount: 5\r",
									"      }\r",
									"    }\r",
									"  ],\r",
									"  checksum: checksum\r",
									"};\r",
									"\r",
									"// Setear el body final en la request\r",
									"pm.request.body.raw = JSON.stringify(body);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let json = pm.response.json();\r",
									"if (json && json.uuid) {\r",
									"    pm.environment.set(\"SELL_UUID\", json.uuid);\r",
									"} else if (json && json.ticketId) {\r",
									"    pm.environment.set(\"SELL_UUID\", json.ticketId);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{BASE_URL}}sell",
							"host": [
								"{{BASE_URL}}sell"
							]
						},
						"description": "This endpoint allows you to sell a product or service. The HTTP POST request should be made to {{BASE_URL}}/sell with the required payload in the raw request body.\n\n### Request Body\n\nThe request body should include the necessary parameters to initiate the sell action.\n\n### Response\n\nUpon successful execution, the endpoint returns a status code of 201 and a JSON response with the following fields:\n\n- type\n    \n- ticketId\n    \n- result\n    \n- errorId\n    \n- errorMessage\n    \n- oldCredit\n    \n- newCredit\n    \n- extTransactionId\n    \n- extTicketId\n    \n- uuid\n    \n- checksum\n    \n\nThe response provides information about the sell transaction, including the type, ticket ID, result, error details, old and new credit values, external transaction and ticket IDs, UUID, and checksum."
					},
					"response": []
				},
				{
					"name": "Credit - Win",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generar UUID v4\r",
									"function uuidv4() {\r",
									"  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r",
									"    const r = Math.random() * 16 | 0;\r",
									"    const v = c === 'x' ? r : (r & 0x3 | 0x8);\r",
									"    return v.toString(16);\r",
									"  });\r",
									"}\r",
									"\r",
									"// Obtener variables desde entorno\r",
									"let extToken = pm.environment.get(\"JWT\");\r",
									"let operatorId = \"operator1\";\r",
									"\r",
									"// 🔁 Reutilizar ticketId y totalAmount de la ejecución anterior (sell)\r",
									"let ticketId = pm.environment.get(\"TICKET_ID\");\r",
									"let totalAmount = pm.environment.get(\"TOTAL_AMOUNT\");\r",
									"\r",
									"// Generar nuevo UUID\r",
									"let uuid = uuidv4();\r",
									"let refUuid = pm.environment.get(\"SELL_UUID\"); // UUID de la venta original\r",
									"let salt = pm.environment.get(\"CHECKSUM_SECRET\");\r",
									"\r",
									"// Calcular checksum\r",
									"let baseString = [\r",
									"  \"CreditRequest\",\r",
									"  extToken,\r",
									"  operatorId,\r",
									"  ticketId,\r",
									"  totalAmount,\r",
									"  uuid,\r",
									"  salt\r",
									"].join(\";\");\r",
									"\r",
									"let checksum = CryptoJS.MD5(baseString).toString();\r",
									"\r",
									"// Guardar nuevas variables\r",
									"pm.environment.set(\"CREDIT_UUID\", uuid);\r",
									"pm.environment.set(\"CREDIT_CHECKSUM\", checksum);\r",
									"\r",
									"// Armar body\r",
									"let body = {\r",
									"  type: \"CreditRequest\",\r",
									"  extToken: extToken,\r",
									"  operatorId: operatorId,\r",
									"  ticketId: ticketId,\r",
									"  totalAmount: totalAmount,\r",
									"  uuid: uuid,\r",
									"  refUuid: refUuid,\r",
									"  transactions: [\r",
									"    {\r",
									"      transaction: {\r",
									"        amount: 1600\r",
									"      },\r",
									"      game: {\r",
									"        id: \"ruleta_5_globos_20250530_1410\",\r",
									"        type: \"quiniela\",\r",
									"        details: {\r",
									"          numero: 15,\r",
									"          premios_posibles: [\r",
									"            { globo: 1, multiplicador: 80 },\r",
									"            { globo: 2, multiplicador: 8 },\r",
									"            { globo: 3, multiplicador: 4 },\r",
									"            { globo: 4, multiplicador: 1 },\r",
									"            { globo: 5, multiplicador: 1 }\r",
									"          ],\r",
									"          resultado: {\r",
									"            globo: 1,\r",
									"            numero_ganador: 15,\r",
									"            multiplicador_pagado: 80\r",
									"          },\r",
									"          premio: {\r",
									"            tipo: \"quiniela\",\r",
									"            monto: 128000,\r",
									"            moneda: \"DOP\"\r",
									"          }\r",
									"        }\r",
									"      }\r",
									"    },\r",
									"    {\r",
									"      transaction: {\r",
									"        amount: 100\r",
									"      },\r",
									"      game: {\r",
									"        id: \"ruleta_5_globos_20250530_1410\",\r",
									"        type: \"pale\",\r",
									"        details: {\r",
									"          numeros: [33, 45],\r",
									"          premios_posibles: [\r",
									"            { globos: [1, 2], multiplicador: 2000 },\r",
									"            { globos: [3, 4], multiplicador: 100 }\r",
									"          ],\r",
									"          resultado: {\r",
									"            globos: [1, 2],\r",
									"            numeros_ganadores: [33, 45],\r",
									"            multiplicador_pagado: 2000\r",
									"          },\r",
									"          premio: {\r",
									"            tipo: \"pale\",\r",
									"            monto: 200000,\r",
									"            moneda: \"DOP\"\r",
									"          }\r",
									"        }\r",
									"      }\r",
									"    },\r",
									"    {\r",
									"      transaction: {\r",
									"        amount: 100\r",
									"      },\r",
									"      game: {\r",
									"        id: \"ruleta_5_globos_20250530_1410\",\r",
									"        type: \"tripleta\",\r",
									"        details: {\r",
									"          numeros: [3, 22, 45],\r",
									"          premios_posibles: [\r",
									"            { globos: [1, 2, 3], multiplicador: 50000 },\r",
									"            { globos: [2, 3, 4], multiplicador: 5000 }\r",
									"          ],\r",
									"          resultado: {\r",
									"            globos: [2, 3, 4],\r",
									"            numeros_ganadores: [3, 22, 45],\r",
									"            multiplicador_pagado: 5000\r",
									"          },\r",
									"          premio: {\r",
									"            tipo: \"tripleta\",\r",
									"            monto: 500000,\r",
									"            moneda: \"DOP\"\r",
									"          }\r",
									"        }\r",
									"      }\r",
									"    }\r",
									"  ],\r",
									"  checksum: checksum\r",
									"};\r",
									"\r",
									"// Enviar el body como JSON en la solicitud\r",
									"pm.request.body.raw = JSON.stringify(body);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{BASE_URL}}credit",
							"host": [
								"{{BASE_URL}}credit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Payout",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generar UUID v4\r",
									"function uuidv4() {\r",
									"  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r",
									"    const r = Math.random() * 16 | 0;\r",
									"    const v = c === 'x' ? r : (r & 0x3 | 0x8);\r",
									"    return v.toString(16);\r",
									"  });\r",
									"}\r",
									"\r",
									"// Obtener variables necesarias desde el entorno\r",
									"let extToken = pm.environment.get(\"JWT\");\r",
									"let operatorId = \"operator1\";\r",
									"let ticketId = pm.environment.get(\"TICKET_ID\");        // ← Reutilizar\r",
									"let totalAmount = pm.environment.get(\"TOTAL_AMOUNT\");  // ← Reutilizar\r",
									"let uuid = uuidv4();\r",
									"let refUuid = pm.environment.get(\"SELL_UUID\");         // ← Reutilizar\r",
									"let salt = pm.environment.get(\"CHECKSUM_SECRET\");\r",
									"\r",
									"// Generar checksum\r",
									"let baseString = [\r",
									"  \"PayoutRequest\",\r",
									"  extToken,\r",
									"  operatorId,\r",
									"  ticketId,\r",
									"  totalAmount,\r",
									"  uuid,\r",
									"  salt\r",
									"].join(\";\");\r",
									"\r",
									"let checksum = CryptoJS.MD5(baseString).toString();\r",
									"\r",
									"// Guardar nuevas variables\r",
									"pm.environment.set(\"PAYOUT_UUID\", uuid);\r",
									"pm.environment.set(\"PAYOUT_CHECKSUM\", checksum);\r",
									"\r",
									"// Crear body de la solicitud\r",
									"let body = {\r",
									"  type: \"PayoutRequest\",\r",
									"  extToken: extToken,\r",
									"  operatorId: operatorId,\r",
									"  ticketId: ticketId,\r",
									"  totalAmount: totalAmount,\r",
									"  refUuid: refUuid,\r",
									"  uuid: uuid,\r",
									"  transactions: [\r",
									"    {\r",
									"      transaction: {\r",
									"        amount: 1600\r",
									"      },\r",
									"      game: {\r",
									"        id: \"ruleta_5_globos_20250530_1410\",\r",
									"        type: \"quiniela\",\r",
									"        details: {\r",
									"          numero: 15,\r",
									"          premios_posibles: [\r",
									"            { globo: 1, multiplicador: 80 },\r",
									"            { globo: 2, multiplicador: 8 },\r",
									"            { globo: 3, multiplicador: 4 },\r",
									"            { globo: 4, multiplicador: 1 },\r",
									"            { globo: 5, multiplicador: 1 }\r",
									"          ],\r",
									"          resultado: {\r",
									"            globo: 1,\r",
									"            numero_ganador: 15,\r",
									"            multiplicador_pagado: 80\r",
									"          },\r",
									"          premio: {\r",
									"            tipo: \"quiniela\",\r",
									"            monto: 128000,\r",
									"            moneda: \"DOP\"\r",
									"          }\r",
									"        }\r",
									"      }\r",
									"    },\r",
									"    {\r",
									"      transaction: {\r",
									"        amount: 100\r",
									"      },\r",
									"      game: {\r",
									"        id: \"ruleta_5_globos_20250530_1410\",\r",
									"        type: \"pale\",\r",
									"        details: {\r",
									"          numeros: [33, 45],\r",
									"          premios_posibles: [\r",
									"            { globos: [1, 2], multiplicador: 2000 },\r",
									"            { globos: [3, 4], multiplicador: 100 }\r",
									"          ],\r",
									"          resultado: {\r",
									"            globos: [1, 2],\r",
									"            numeros_ganadores: [33, 45],\r",
									"            multiplicador_pagado: 2000\r",
									"          },\r",
									"          premio: {\r",
									"            tipo: \"pale\",\r",
									"            monto: 200000,\r",
									"            moneda: \"DOP\"\r",
									"          }\r",
									"        }\r",
									"      }\r",
									"    },\r",
									"    {\r",
									"      transaction: {\r",
									"        amount: 100\r",
									"      },\r",
									"      game: {\r",
									"        id: \"ruleta_5_globos_20250530_1410\",\r",
									"        type: \"tripleta\",\r",
									"        details: {\r",
									"          numeros: [3, 22, 45],\r",
									"          premios_posibles: [\r",
									"            { globos: [1, 2, 3], multiplicador: 50000 },\r",
									"            { globos: [2, 3, 4], multiplicador: 5000 }\r",
									"          ],\r",
									"          resultado: {\r",
									"            globos: [2, 3, 4],\r",
									"            numeros_ganadores: [3, 22, 45],\r",
									"            multiplicador_pagado: 5000\r",
									"          },\r",
									"          premio: {\r",
									"            tipo: \"tripleta\",\r",
									"            monto: 500000,\r",
									"            moneda: \"DOP\"\r",
									"          }\r",
									"        }\r",
									"      }\r",
									"    }\r",
									"  ],\r",
									"  checksum: checksum\r",
									"};\r",
									"\r",
									"// Enviar body JSON como raw\r",
									"pm.request.body.raw = JSON.stringify(body);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}payout",
							"host": [
								"{{BASE_URL}}payout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sell Loss",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generador de UUID v4\r",
									"function uuidv4() {\r",
									"  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r",
									"    const r = Math.random() * 16 | 0;\r",
									"    const v = c === 'x' ? r : (r & 0x3 | 0x8);\r",
									"    return v.toString(16);\r",
									"  });\r",
									"}\r",
									"\r",
									"// Variables base\r",
									"const extToken = pm.environment.get(\"JWT\");\r",
									"const operatorId = \"operator1\";\r",
									"\r",
									"// Generar ticketId aleatorio\r",
									"const randomSuffix = Math.random().toString(36).substring(2, 8).toUpperCase();\r",
									"const ticketId = `tq-${randomSuffix}`;\r",
									"pm.environment.set(\"TICKET_ID\", ticketId);\r",
									"\r",
									"// totalAmount aleatorio entre 100 y 10000\r",
									"const totalAmount = Math.floor(Math.random() * (10000 - 100 + 1)) + 100;\r",
									"pm.environment.set(\"TOTAL_AMOUNT\", totalAmount);\r",
									"\r",
									"// UUIDs y salt\r",
									"const uuid = uuidv4();\r",
									"const refUuid = pm.environment.get(\"SELL_UUID\");\r",
									"const salt = pm.environment.get(\"CHECKSUM_SECRET\");\r",
									"const type = \"SellRequest\";\r",
									"\r",
									"// Cálculo de checksum\r",
									"const baseString = [\r",
									"    type,\r",
									"    extToken,\r",
									"    operatorId,\r",
									"    ticketId,\r",
									"    totalAmount,\r",
									"    uuid,\r",
									"    salt\r",
									"].join(\";\");\r",
									"\r",
									"const checksum = CryptoJS.MD5(baseString).toString();\r",
									"\r",
									"// Guardar UUID y checksum\r",
									"pm.environment.set(\"SELL_UUID\", uuid);\r",
									"pm.environment.set(\"SELL_CHECKSUM\", checksum);\r",
									"\r",
									"// Armar body dinámico\r",
									"const body = {\r",
									"  type: type,\r",
									"  extToken: extToken,\r",
									"  operatorId: operatorId,\r",
									"  ticketId: ticketId,\r",
									"  totalAmount: totalAmount,\r",
									"  uuid: uuid,\r",
									"  refUuid: refUuid,\r",
									"  transactions: [\r",
									"    {\r",
									"      game: {\r",
									"        id: \"ruleta_3_tombolas_20250530_1000\",\r",
									"        type: \"ruleta_3_tombolas\",\r",
									"        details: {\r",
									"          tipo: \"quiniela\",\r",
									"          numero: 27,\r",
									"          tombola: 1,\r",
									"          multiplicador: 60\r",
									"        }\r",
									"      },\r",
									"      transaction: {\r",
									"        amount: 20\r",
									"      }\r",
									"    },\r",
									"    {\r",
									"      game: {\r",
									"        id: \"ruleta_3_tombolas_20250530_1000\",\r",
									"        type: \"ruleta_3_tombolas\",\r",
									"        details: {\r",
									"          tipo: \"pale\",\r",
									"          numeros: [14, 85],\r",
									"          tombolas: [1, 2],\r",
									"          multiplicador: 1000\r",
									"        }\r",
									"      },\r",
									"      transaction: {\r",
									"        amount: 10\r",
									"      }\r",
									"    },\r",
									"    {\r",
									"      game: {\r",
									"        id: \"ruleta_3_tombolas_20250530_1000\",\r",
									"        type: \"ruleta_3_tombolas\",\r",
									"        details: {\r",
									"          tipo: \"tripleta\",\r",
									"          numeros: [3, 11, 56],\r",
									"          tombolas: [1, 2, 3],\r",
									"          multiplicador: 20000\r",
									"        }\r",
									"      },\r",
									"      transaction: {\r",
									"        amount: 5\r",
									"      }\r",
									"    }\r",
									"  ],\r",
									"  checksum: checksum\r",
									"};\r",
									"\r",
									"// Setear el body final en la request\r",
									"pm.request.body.raw = JSON.stringify(body);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let json = pm.response.json();\r",
									"if (json && json.uuid) {\r",
									"    pm.environment.set(\"SELL_UUID\", json.uuid);\r",
									"} else if (json && json.ticketId) {\r",
									"    pm.environment.set(\"SELL_UUID\", json.ticketId);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{BASE_URL}}sell",
							"host": [
								"{{BASE_URL}}sell"
							]
						}
					},
					"response": []
				},
				{
					"name": "Credit - Loss",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generar UUID v4\r",
									"function uuidv4() {\r",
									"  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r",
									"    const r = Math.random() * 16 | 0;\r",
									"    const v = c === 'x' ? r : (r & 0x3 | 0x8);\r",
									"    return v.toString(16);\r",
									"  });\r",
									"}\r",
									"\r",
									"// Obtener variables del entorno\r",
									"let extToken = pm.environment.get(\"JWT\");\r",
									"let operatorId = \"operator1\";\r",
									"let ticketId = pm.environment.get(\"TICKET_ID\");        // ← reutilizado dinámicamente\r",
									"let totalAmount = 0;                                   // ← en CreditRequest normalmente es 0\r",
									"let uuid = uuidv4();\r",
									"let refUuid = pm.environment.get(\"SELL_UUID\");         // ← reutilizado dinámicamente\r",
									"let salt = pm.environment.get(\"CHECKSUM_SECRET\");\r",
									"\r",
									"// Generar checksum\r",
									"let baseString = [\r",
									"  \"CreditRequest\",\r",
									"  extToken,\r",
									"  operatorId,\r",
									"  ticketId,\r",
									"  totalAmount,\r",
									"  uuid,\r",
									"  salt\r",
									"].join(\";\");\r",
									"\r",
									"let checksum = CryptoJS.MD5(baseString).toString();\r",
									"\r",
									"// Guardar variables\r",
									"pm.environment.set(\"CREDIT_UUID\", uuid);\r",
									"pm.environment.set(\"CREDIT_CHECKSUM\", checksum);\r",
									"\r",
									"// Armar el body\r",
									"let body = {\r",
									"  type: \"CreditRequest\",\r",
									"  extToken: extToken,\r",
									"  operatorId: operatorId,\r",
									"  ticketId: ticketId,\r",
									"  totalAmount: totalAmount,\r",
									"  uuid: uuid,\r",
									"  refUuid: refUuid,\r",
									"  transactions: [\r",
									"    {\r",
									"      transaction: { amount: 0 },\r",
									"      game: {\r",
									"        id: \"ruleta_5_globos_20250530_1410\",\r",
									"        type: \"quiniela\",\r",
									"        details: {\r",
									"          numero: 15,\r",
									"          premios_posibles: [\r",
									"            { globo: 1, multiplicador: 80 },\r",
									"            { globo: 2, multiplicador: 8 },\r",
									"            { globo: 3, multiplicador: 4 },\r",
									"            { globo: 4, multiplicador: 1 },\r",
									"            { globo: 5, multiplicador: 1 }\r",
									"          ],\r",
									"          resultado: {\r",
									"            globo: 1,\r",
									"            numero_ganador: 15,\r",
									"            multiplicador_pagado: 80\r",
									"          },\r",
									"          premio: {\r",
									"            tipo: \"quiniela\",\r",
									"            monto: 128000,\r",
									"            moneda: \"DOP\"\r",
									"          }\r",
									"        }\r",
									"      }\r",
									"    },\r",
									"    {\r",
									"      transaction: { amount: 0 },\r",
									"      game: {\r",
									"        id: \"ruleta_5_globos_20250530_1410\",\r",
									"        type: \"pale\",\r",
									"        details: {\r",
									"          numeros: [33, 45],\r",
									"          premios_posibles: [\r",
									"            { globos: [1, 2], multiplicador: 2000 },\r",
									"            { globos: [3, 4], multiplicador: 100 }\r",
									"          ],\r",
									"          resultado: {\r",
									"            globos: [1, 2],\r",
									"            numeros_ganadores: [33, 45],\r",
									"            multiplicador_pagado: 2000\r",
									"          },\r",
									"          premio: {\r",
									"            tipo: \"pale\",\r",
									"            monto: 200000,\r",
									"            moneda: \"DOP\"\r",
									"          }\r",
									"        }\r",
									"      }\r",
									"    },\r",
									"    {\r",
									"      transaction: { amount: 0 },\r",
									"      game: {\r",
									"        id: \"ruleta_5_globos_20250530_1410\",\r",
									"        type: \"tripleta\",\r",
									"        details: {\r",
									"          numeros: [3, 22, 45],\r",
									"          premios_posibles: [\r",
									"            { globos: [1, 2, 3], multiplicador: 50000 },\r",
									"            { globos: [2, 3, 4], multiplicador: 5000 }\r",
									"          ],\r",
									"          resultado: {\r",
									"            globos: [2, 3, 4],\r",
									"            numeros_ganadores: [3, 22, 45],\r",
									"            multiplicador_pagado: 5000\r",
									"          },\r",
									"          premio: {\r",
									"            tipo: \"tripleta\",\r",
									"            monto: 500000,\r",
									"            moneda: \"DOP\"\r",
									"          }\r",
									"        }\r",
									"      }\r",
									"    }\r",
									"  ],\r",
									"  checksum: checksum\r",
									"};\r",
									"\r",
									"// Asignar el cuerpo de la solicitud\r",
									"pm.request.body.raw = JSON.stringify(body);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{BASE_URL}}credit",
							"host": [
								"{{BASE_URL}}credit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sell Cancel",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generador de UUID v4\r",
									"function uuidv4() {\r",
									"  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r",
									"    const r = Math.random() * 16 | 0;\r",
									"    const v = c === 'x' ? r : (r & 0x3 | 0x8);\r",
									"    return v.toString(16);\r",
									"  });\r",
									"}\r",
									"\r",
									"// Variables base\r",
									"const extToken = pm.environment.get(\"JWT\");\r",
									"const operatorId = \"operator1\";\r",
									"\r",
									"// Generar ticketId aleatorio\r",
									"const randomSuffix = Math.random().toString(36).substring(2, 8).toUpperCase();\r",
									"const ticketId = `tq-${randomSuffix}`;\r",
									"pm.environment.set(\"TICKET_ID\", ticketId);\r",
									"\r",
									"// totalAmount aleatorio entre 100 y 10000\r",
									"const totalAmount = Math.floor(Math.random() * (10000 - 100 + 1)) + 100;\r",
									"pm.environment.set(\"TOTAL_AMOUNT\", totalAmount);\r",
									"\r",
									"// UUIDs y salt\r",
									"const uuid = uuidv4();\r",
									"const refUuid = pm.environment.get(\"SELL_UUID\");\r",
									"const salt = pm.environment.get(\"CHECKSUM_SECRET\");\r",
									"const type = \"SellRequest\";\r",
									"\r",
									"// Cálculo de checksum\r",
									"const baseString = [\r",
									"    type,\r",
									"    extToken,\r",
									"    operatorId,\r",
									"    ticketId,\r",
									"    totalAmount,\r",
									"    uuid,\r",
									"    salt\r",
									"].join(\";\");\r",
									"\r",
									"const checksum = CryptoJS.MD5(baseString).toString();\r",
									"\r",
									"// Guardar UUID y checksum\r",
									"pm.environment.set(\"SELL_UUID\", uuid);\r",
									"pm.environment.set(\"SELL_CHECKSUM\", checksum);\r",
									"\r",
									"// Armar body dinámico\r",
									"const body = {\r",
									"  type: type,\r",
									"  extToken: extToken,\r",
									"  operatorId: operatorId,\r",
									"  ticketId: ticketId,\r",
									"  totalAmount: totalAmount,\r",
									"  uuid: uuid,\r",
									"  refUuid: refUuid,\r",
									"  transactions: [\r",
									"    {\r",
									"      game: {\r",
									"        id: \"ruleta_3_tombolas_20250530_1000\",\r",
									"        type: \"ruleta_3_tombolas\",\r",
									"        details: {\r",
									"          tipo: \"quiniela\",\r",
									"          numero: 27,\r",
									"          tombola: 1,\r",
									"          multiplicador: 60\r",
									"        }\r",
									"      },\r",
									"      transaction: {\r",
									"        amount: 20\r",
									"      }\r",
									"    },\r",
									"    {\r",
									"      game: {\r",
									"        id: \"ruleta_3_tombolas_20250530_1000\",\r",
									"        type: \"ruleta_3_tombolas\",\r",
									"        details: {\r",
									"          tipo: \"pale\",\r",
									"          numeros: [14, 85],\r",
									"          tombolas: [1, 2],\r",
									"          multiplicador: 1000\r",
									"        }\r",
									"      },\r",
									"      transaction: {\r",
									"        amount: 10\r",
									"      }\r",
									"    },\r",
									"    {\r",
									"      game: {\r",
									"        id: \"ruleta_3_tombolas_20250530_1000\",\r",
									"        type: \"ruleta_3_tombolas\",\r",
									"        details: {\r",
									"          tipo: \"tripleta\",\r",
									"          numeros: [3, 11, 56],\r",
									"          tombolas: [1, 2, 3],\r",
									"          multiplicador: 20000\r",
									"        }\r",
									"      },\r",
									"      transaction: {\r",
									"        amount: 5\r",
									"      }\r",
									"    }\r",
									"  ],\r",
									"  checksum: checksum\r",
									"};\r",
									"\r",
									"// Setear el body final en la request\r",
									"pm.request.body.raw = JSON.stringify(body);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let json = pm.response.json();\r",
									"if (json && json.uuid) {\r",
									"    pm.environment.set(\"SELL_UUID\", json.uuid);\r",
									"} else if (json && json.ticketId) {\r",
									"    pm.environment.set(\"SELL_UUID\", json.ticketId);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{BASE_URL}}sell",
							"host": [
								"{{BASE_URL}}sell"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cancel",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Función para generar UUID v4\r",
									"function uuidv4() {\r",
									"  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r",
									"    const r = Math.random() * 16 | 0;\r",
									"    const v = c === 'x' ? r : (r & 0x3 | 0x8);\r",
									"    return v.toString(16);\r",
									"  });\r",
									"}\r",
									"\r",
									"// Obtener variables del entorno\r",
									"let extToken = pm.environment.get(\"JWT\");\r",
									"let operatorId = \"operator1\";\r",
									"let ticketId = pm.environment.get(\"TICKET_ID\");        // ← reutilización\r",
									"let totalAmount = 140;                                 // ← ajustable si es necesario\r",
									"let uuid = uuidv4();\r",
									"let refUuid = pm.environment.get(\"SELL_UUID\");         // ← reutilización\r",
									"let salt = pm.environment.get(\"CHECKSUM_SECRET\");\r",
									"\r",
									"// Generar checksum\r",
									"let baseString = [\r",
									"  \"CancelRequest\",\r",
									"  extToken,\r",
									"  operatorId,\r",
									"  ticketId,\r",
									"  totalAmount,\r",
									"  uuid,\r",
									"  salt\r",
									"].join(\";\");\r",
									"\r",
									"console.log(\"BaseString:\", baseString);\r",
									"\r",
									"let checksum = CryptoJS.MD5(baseString).toString();\r",
									"\r",
									"// Guardar en variables de entorno\r",
									"pm.environment.set(\"CANCEL_UUID\", uuid);\r",
									"pm.environment.set(\"CANCEL_CHECKSUM\", checksum);\r",
									"\r",
									"// Transacciones (simuladas con montos)\r",
									"let transactions = [\r",
									"  {\r",
									"    transaction: { amount: 1600 },\r",
									"    game: {\r",
									"      id: \"ruleta_5_globos_20250530_1410\",\r",
									"      type: \"quiniela\",\r",
									"      details: {\r",
									"        numero: 15,\r",
									"        premios_posibles: [\r",
									"          { globo: 1, multiplicador: 80 },\r",
									"          { globo: 2, multiplicador: 8 },\r",
									"          { globo: 3, multiplicador: 4 },\r",
									"          { globo: 4, multiplicador: 1 },\r",
									"          { globo: 5, multiplicador: 1 }\r",
									"        ],\r",
									"        resultado: {\r",
									"          globo: 1,\r",
									"          numero_ganador: 15,\r",
									"          multiplicador_pagado: 80\r",
									"        },\r",
									"        premio: {\r",
									"          tipo: \"quiniela\",\r",
									"          monto: 128000,\r",
									"          moneda: \"DOP\"\r",
									"        }\r",
									"      }\r",
									"    }\r",
									"  },\r",
									"  {\r",
									"    transaction: { amount: 100 },\r",
									"    game: {\r",
									"      id: \"ruleta_5_globos_20250530_1410\",\r",
									"      type: \"pale\",\r",
									"      details: {\r",
									"        numeros: [33, 45],\r",
									"        premios_posibles: [\r",
									"          { globos: [1, 2], multiplicador: 2000 },\r",
									"          { globos: [3, 4], multiplicador: 100 }\r",
									"        ],\r",
									"        resultado: {\r",
									"          globos: [1, 2],\r",
									"          numeros_ganadores: [33, 45],\r",
									"          multiplicador_pagado: 2000\r",
									"        },\r",
									"        premio: {\r",
									"          tipo: \"pale\",\r",
									"          monto: 200000,\r",
									"          moneda: \"DOP\"\r",
									"        }\r",
									"      }\r",
									"    }\r",
									"  },\r",
									"  {\r",
									"    transaction: { amount: 100 },\r",
									"    game: {\r",
									"      id: \"ruleta_5_globos_20250530_1410\",\r",
									"      type: \"tripleta\",\r",
									"      details: {\r",
									"        numeros: [3, 22, 45],\r",
									"        premios_posibles: [\r",
									"          { globos: [1, 2, 3], multiplicador: 50000 },\r",
									"          { globos: [2, 3, 4], multiplicador: 5000 }\r",
									"        ],\r",
									"        resultado: {\r",
									"          globos: [2, 3, 4],\r",
									"          numeros_ganadores: [3, 22, 45],\r",
									"          multiplicador_pagado: 5000\r",
									"        },\r",
									"        premio: {\r",
									"          tipo: \"tripleta\",\r",
									"          monto: 500000,\r",
									"          moneda: \"DOP\"\r",
									"        }\r",
									"      }\r",
									"    }\r",
									"  }\r",
									"];\r",
									"\r",
									"// Armar body\r",
									"let body = {\r",
									"  type: \"CancelRequest\",\r",
									"  extToken: extToken,\r",
									"  operatorId: operatorId,\r",
									"  ticketId: ticketId,\r",
									"  totalAmount: totalAmount,\r",
									"  uuid: uuid,\r",
									"  refUuid: refUuid,\r",
									"  transactions: transactions,\r",
									"  checksum: checksum\r",
									"};\r",
									"\r",
									"// Asignar al body de la solicitud\r",
									"console.log(\"Body:\", JSON.stringify(body));\r",
									"pm.request.body.raw = JSON.stringify(body);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{BASE_URL}}cancel",
							"host": [
								"{{BASE_URL}}cancel"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}